configurations {
    markdownDoclet
}

dependencies {
    markdownDoclet "org.jdrupes.mdoclet:doclet:4.1.0"
}

group = "com.softwareplumbers.oss"

/* Fallback for version name - get the first tag describing the version in place */
def GitVersionName = "git describe --tags".execute().text.split('\n')[0].trim();

/* the env var GITHUB_REF_NAME will take precedence over GitVersionName. Remove the 'deploy' prefix */
version = (System.getenv('GITHUB_REF_NAME') ?: GitVersionName).replace('deploy.','');

def SNAPSHOT_BUILDS = ["master"];

if (SNAPSHOT_BUILDS.contains(version)) { version = version + "-SNAPSHOT" };

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'maven-publish'

repositories { 
    mavenCentral() 
}

test {
	systemProperties = System.properties
	testLogging {
        events "passed", "skipped", "failed"
    }
}

task mdoclet(type: Javadoc) {
    enabled = JavaVersion.current() == JavaVersion.VERSION_21

    source = fileTree(dir: 'src/main/java', include: '**/*.java')
    destinationDir = project.file("build/generated/doc")
    options.docletpath = configurations.markdownDoclet.files.asType(List)
    options.doclet = 'org.jdrupes.mdoclet.MDoclet'
    options.overview = 'src/overview.md'
    options.addStringOption('Xdoclint:-html', '-quiet')

    options.setJFlags([
        '--add-exports=jdk.compiler/com.sun.tools.doclint=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.toolkit=ALL-UNNAMED',
        '--add-opens=jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.resources.releases=ALL-UNNAMED'
    ])
}

java {
    withSourcesJar()
}

task javadocJar(type: Jar) {
    from mdoclet
    archiveBaseName = 'qualified-name'
    archiveClassifier = 'javadoc'
}

dependencies {

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.1'
    testImplementation group: 'org.glassfish', name: 'javax.json', version: '1.1.2'
}

jar {
    archiveBaseName = 'qualified-name'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "qualified-name"
            artifact sourcesJar
            artifact jar
            artifact javadocJar
            pom {
                name = 'Qualified Name'
                description = 'Library for composing text matching patterns over different back-ends'
                url = 'https://github.com/SoftwarePlumbersOss/qualified-name-java'
                licenses {
                    license {
                        name = 'LGPL'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'softwareplumber'
                        name = 'Jonathan Essex'
                        email = 'jonathan.essex@softwareplumbers.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/SoftwarePlumbersOss/qualified-name-java.git'
                }
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/SoftwarePlumbersOss/qualified-name-java"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
